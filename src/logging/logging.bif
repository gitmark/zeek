##! Internal functions and types used by the logging framework.

module Log;

%%{
#include "zeek/logging/Manager.h"
%%}

type Filter: record;
type Stream: record;
type RotationInfo: record;
type RotationFmtInfo: record;

enum PrintLogType %{
	REDIRECT_NONE,
	REDIRECT_STDOUT,
	REDIRECT_ALL,
%}

function Log::__create_stream%(id: Log::ID, stream: Log::Stream%) : bool
	%{
	bool result = zeek::log_mgr->CreateStream(id->AsEnumVal(), stream->AsRecordVal());
	return zeek::val_mgr->Bool(result);
	%}

function Log::__remove_stream%(id: Log::ID%) : bool
	%{
	bool result = zeek::log_mgr->RemoveStream(id->AsEnumVal());
	return zeek::val_mgr->Bool(result);
	%}

function Log::__enable_stream%(id: Log::ID%) : bool
	%{
	bool result = zeek::log_mgr->EnableStream(id->AsEnumVal());
	return zeek::val_mgr->Bool(result);
	%}

function Log::__disable_stream%(id: Log::ID%) : bool
	%{
	bool result = zeek::log_mgr->DisableStream(id->AsEnumVal());
	return zeek::val_mgr->Bool(result);
	%}

function Log::__add_filter%(id: Log::ID, filter: Log::Filter%) : bool
	%{
	bool result = zeek::log_mgr->AddFilter(id->AsEnumVal(), filter->AsRecordVal());
	return zeek::val_mgr->Bool(result);
	%}

function Log::__remove_filter%(id: Log::ID, name: string%) : bool
	%{
	bool result = zeek::log_mgr->RemoveFilter(id->AsEnumVal(), name);
	return zeek::val_mgr->Bool(result);
	%}

function Log::__write%(id: Log::ID, columns: any%) : bool
	%{
	bool result = zeek::log_mgr->Write(id->AsEnumVal(), columns->AsRecordVal());
	return zeek::val_mgr->Bool(result);
	%}

function Log::__set_buf%(id: Log::ID, buffered: bool%): bool
	%{
	bool result = zeek::log_mgr->SetBuf(id->AsEnumVal(), buffered);
	return zeek::val_mgr->Bool(result);
	%}

function Log::__flush%(id: Log::ID%): bool
	%{
	bool result = zeek::log_mgr->Flush(id->AsEnumVal());
	return zeek::val_mgr->Bool(result);
	%}

%%{
namespace {
	// Create intrusive pointer adopting reference.
	zeek::RecordValPtr ref(zeek::Val *v) {
		if ( v->GetType()->Tag() != zeek::TYPE_RECORD ) {
			zeek::emit_builtin_error("not a record");
			return nullptr;
		}

		return zeek::IntrusivePtr<zeek::RecordVal>{zeek::NewRef{}, v->AsRecordVal()};
	}
}
%%}

function Log::__delay%(id: Log::ID, rec: any, post_delay_cb: PostDelayCallback%): Log::DelayToken
	%{
	auto columns = ref(rec);
	if ( ! columns )
		return zeek::val_mgr->Bool(false);

	static auto empty_post_delay_cb_ptr = zeek::id::find_func("Log::empty_post_delay_cb");

	auto post_delay_cb_ptr = post_delay_cb->AsFuncVal()->AsFuncPtr();
	if ( post_delay_cb_ptr == empty_post_delay_cb_ptr )
		post_delay_cb_ptr = Func::nil;

	bool result = zeek::log_mgr->Delay({zeek::NewRef{}, id->AsEnumVal()}, columns, post_delay_cb_ptr);
	return zeek::val_mgr->Bool(result);
	%}

function Log::__delay_finish%(id: Log::ID, rec: any, token: Log::DelayToken%): bool
	%{
	auto columns = ref(rec);
	if ( ! columns )
		return zeek::val_mgr->Bool(false);

	bool result = zeek::log_mgr->DelayFinish({zeek::NewRef{}, id->AsEnumVal()}, columns, {zeek::NewRef{}, token});
	return zeek::val_mgr->Bool(result);
	%}

function Log::__set_max_delay_interval%(id: Log::ID, max_delay: interval%): bool
	%{
	bool result = zeek::log_mgr->SetMaxDelayInterval(id->AsEnumVal(), max_delay);
	return zeek::val_mgr->Bool(result);
	%}

function Log::__set_max_delay_queue_size%(id: Log::ID, max_queue_size: count%): bool
	%{
	bool result = zeek::log_mgr->SetMaxDelayQueueSize(id->AsEnumVal(), max_queue_size);
	return zeek::val_mgr->Bool(result);
	%}
